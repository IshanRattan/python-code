

"""

Personal loans are a lucrative revenue stream for banks. The typical interest rate of a two-year loan in the United Kingdom is around 10%. This might not sound like a lot, but in September 2022 alone UK consumers borrowed around £1.5 billion, which would mean approximately £300 million in interest generated by banks over two years!

You have been asked to work with a bank to clean the data they collected as part of a recent marketing campaign, which aimed to get customers to take out a personal loan. They plan to conduct more marketing campaigns going forward so would like you to ensure it conforms to the specific structure and data types that they specify so that they can then use the cleaned data you provide to set up a PostgreSQL database, which will store this campaign's data and allow data from future campaigns to be easily imported.

They have supplied you with a csv file called "bank_marketing.csv", which you will need to clean, reformat, and split the data, saving three final csv files. Specifically, the three files should have the names and contents as outlined below:

client.csv
column	        data type	    description	                                                cleaning requirements
client_id	    integer	        Client ID	                                                        N/A
age	            integer	        Client's age in years	                                            N/A
job	            object	        Client's type of job	                                        Change "." to "_"
marital	        object	        Client's marital status	                                            N/A
education	    object	        Client's level of education	                    Change "." to "_" & "unknown" to np.NaN
credit_default	bool	        Whether the client's credit is in default	        Convert to boolean data type
mortgage	    bool	        Whether the client has an existing mortgage 	    Convert to boolean data type

campaign.csv
column	data type	description	cleaning requirements
client_id	integer	Client ID	N/A
number_contacts	integer	Number of contact attempts to the client in the current campaign	N/A
contact_duration	integer	Last contact duration in seconds	N/A
previous_campaign_contacts	integer	Number of contact attempts to the client in the previous campaign	N/A
previous_outcome	bool	Outcome of the previous campaign	Convert to boolean data type
campaign_outcome	bool	Outcome of the current campaign	Convert to boolean data type
last_contact_date	datetime	Last date the client was contacted	Create from a combination of day, month, and a newly created year column (which should have a value of 2022);
Format = "YYYY-MM-DD"

economics.csv
column	data type	description	cleaning requirements
client_id	integer	Client ID	N/A
cons_price_idx	float	Consumer price index (monthly indicator)	N/A
euribor_three_months	float	Euro Interbank Offered Rate (euribor) three-month rate (daily indicator)	N/A

"""




import pandas as pd
import numpy as np

# load dataset
infile = pd.read_csv("bank_marketing.csv")
infile.head()

# columns for client data
client = infile[['client_id', 'age', 'job', 'marital', 'education', 'credit_default', 'mortgage']]
client['job'] = client['job'].str.replace('.', '_')
client['education'] = client['education'].str.replace('.', '_').replace("unknown", np.NaN)
client['mortgage'] = client['mortgage'].replace('no', 'false').replace('yes', 'true').replace('unknown', 'false')
client['mortgage'] = client['mortgage'].map({'false': False, 'true': True})
client['credit_default'] = client['credit_default'].replace('no', 'false').replace('yes', 'true').replace('unknown', 'false')
client['credit_default'] = client['credit_default'].map({'false': False, 'true': True})
client.to_csv('client.csv')

# columns for campaign data
campaign = infile[['client_id', 'number_contacts', 'contact_duration', 'previous_campaign_contacts', 'previous_outcome', 'campaign_outcome', 'month', 'day']]
campaign['previous_outcome'] = campaign['previous_outcome'].str.replace('nonexistent', 'failure')
campaign['previous_outcome'] = campaign['previous_outcome'].map({'failure':False, 'success':True})
campaign['campaign_outcome'] = campaign['campaign_outcome'].map({'no':False, 'yes':True})
campaign['last_contact_date'] = '2022-' + campaign['month'].astype('str') + '-' + campaign['day'].astype('str')
campaign['last_contact_date'] = pd.to_datetime(campaign['last_contact_date'], format="%Y-%b-%d")
campaign.drop(['month', 'day'], axis=1, inplace=True)
campaign.to_csv('campaign.csv')

# columns for economics data
economics = infile[['client_id', 'cons_price_idx', 'euribor_three_months']]
economics.to_csv('economics.csv')